#!/bin/sh
# script that gives mpv URL
# default video height cap by the 2nd argument,
# will be less if unavailable in youtube-dl or default
H_CAP='1080'
# youtube-dl --playlist-end > get first N items from playlist
# by the 3rd argument or default N
P_CAP='1'
# prefer certain extension over FALLBACK in youtube-dl
EXT='webm'

get_defaults() {
    # use $1 or default (clipboard)
    URL="${1:-$(xclip -selection clipboard -out)}"
    # use $2 or default
    HEIGHT="${2:-"$H_CAP"}"
    # use $3 or default
    PE="${3:-"$P_CAP"}"
}

notify() {
    # call using ... &
    # get title information, notify at the background and suppress error output
    TITLE=$(youtube-dl --no-warnings --playlist-end=1 --get-title "$URL" 2> /dev/null)
    STATUS='Playing... ['"$PROFILE"']'
    MESSAGE="$TITLE"'\n'"$URL"
    notify-send -t 5000 "$STATUS" "$MESSAGE"
}

main() {
    get_defaults "$@"
    # substring in URL
    case "$URL" in
        *"soundcloud"*)
            PROFILE='audio'
            QUALITY='audio'     # get only audio
            PE='-1'             # get all items in the playlist
            notify &
            ytdl "$@"
        ;;
        *"playlist"*)
            PROFILE='audio'
            QUALITY='audio'     # get only audio
            PE='-1'             # get all items in the playlist
            notify &
            ytdl "$@"
        ;;
        *"youtu"*)
            PROFILE='ytdl'
            notify &
            ytdl "$@"
        ;;
        *"videos"*)
            PROFILE='vods'
            notify &
            ytdl "$@"
        ;;
        *"twitch"*)
            PROFILE='stream'
            notify &
            # only streamlink knows this {*}
            TITLE='{author} - {category} -- {title}'
            strl "$@"
        ;;
        *"goodgame"*)
            PROFILE='stream'
            notify &
            TITLE=$(basename "$URL")
            strl "$@"
        ;;
        *)
            PROFILE='ytdl'
            ytdl_check "$URL"
            notify &
            ytdl "$@"
        ;;
    esac >/dev/null
}

ytdl_check() {
    # youtube-dl URL verification, verify only first item if many
    check="$(youtube-dl --no-warnings --playlist-end=1 --simulate "$1")"
    return_code=$?
    if [ "$return_code" -ne 0 ]; then
        summary="youtube-dl:"
        msg="TERMINATED\nInvalid URL,\nor just the first element from the URL"
        notify-send -t 5000 -u critical "$summary" "$msg"
        exit 1
    fi
}

strl_check() {
    # streamlink URL verification
    check="$(streamlink --can-handle-url "$1")"
    return_code=$?
    if [ "$return_code" -ne 0 ]; then
        summary="streamlink:"
        msg="TERMINATED\nInvalid URL,\nstreamlink cannot process this URL"
        notify-send -t 5000 -u critical "$summary" "$msg"
        exit 1
    fi
}

ytdl() {
    # youtube-dl
    # set HEIGHT by the secondary argument
    case "$HEIGHT" in
        *"1"*)
            HEIGHT="1080"
        ;;
        *"4"*)
            HEIGHT="480"
        ;;
        *"7"*)
            HEIGHT="720"
        ;;
        *"8"*)
            HEIGHT="1080"
        ;;
        *"a"*)
            QUALITY="audio"
        ;;
        *)
            HEIGHT="$H_CAP"
        ;;
    esac >/dev/null
    VIDEO='bestvideo[ext='"$EXT"'][height<=?'"$HEIGHT"']'
    AUDIO='bestaudio[ext='"$EXT"']'
    GLUED="$VIDEO"'+'"$AUDIO"
    FALLBACKVIDEO='bestvideo[height<=?'"$HEIGHT"']'
    FALLBACKAUDIO='bestaudio/best'
    FORMAT="$GLUED"'/'"$FALLBACKVIDEO"'+'"$FALLBACKAUDIO"
    # get audio only
    case "$QUALITY" in
        *"a"*)
            QUALITY="$AUDIO"'/'"$FALLBACKAUDIO"
        ;;
        *)
            QUALITY="$FORMAT"
        ;;
    esac >/dev/null
    COMMAND=$(screen -dm mpv --ytdl-raw-options=playlist-end="$PE" --ytdl-format="$QUALITY" --profile="$PROFILE" "$URL")
}

strl() {
    # streamlink
    strl_check "$URL"
    # use $2 or default (best)
    QUALITY="${2:-"best"}"
    # set QUALITY by the secondary argument
    case "$QUALITY" in
        *"best"*)
            QUALITY="best"
        ;;
        *"4"*)
            QUALITY="480p"
        ;;
        *"7"*)
            QUALITY="720p"
        ;;
        *"6"*)
            QUALITY="720p60"
        ;;
        *"a"*)
            QUALITY="audio_only"
        ;;
        *)
            QUALITY="best"
        ;;
    esac >/dev/null
    TITLE+=' | ['"$QUALITY"']'
    COMMAND=$(screen -dm streamlink --quiet --title "$TITLE" "$URL" "$QUALITY")
}

main "$@"

