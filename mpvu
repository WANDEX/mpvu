#!/bin/sh
# open video/stream URL in mpv

# set -e

# change main executable: youtube-dl, yt-dlp
ytdl_exec="yt-dlp"

USAGE="\
Usage: $(basename "$0") [OPTION...]
OPTIONS
    -a, --attempts  How many attempts to make for reconnect to the stream
    -e, --end       If url is playlist - how many items to play (default:1)
    -h, --help      Display help
    -q, --quality   Quality of video/stream
    -u, --url       URL of video/stream
    --quiet         Do not show notify message (except ERRORS)
"

get_opt() {
    # Parse and read OPTIONS command-line options
    SHORT=a:e:hq:u:
    LONG=attempts:,end:,help,quality:,url:,quiet
    OPTIONS=$(getopt --options $SHORT --long $LONG --name "$0" -- "$@")
    # PLACE FOR OPTION DEFAULTS
    URL=$(xclip -selection clipboard -out)
    YTDL_Q='1080' # video height cap, will be less if unavailable in ytdl_exec
    STRL_Q='best' # default quality in streamlink
    END=1         # ytdl_exec --playlist-end > get first N items from playlist
    EXT='webm'    # prefer specific extension over fallback
    UQLT='1080'   # upper bound video height cap, specific for the extension EXT
    LQLT='720'    # lower bound -//- [hardcoded] (if unavailable for the EXT -> fallback)
    attempts_total=1
    slp=5
    QUIET=0
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
        -a|--attempts)
            shift
            attempts_total=$1
            ;;
        -e|--end)
            shift
            case $1 in
                -1) END=-1 ;; # get full playlist
                0*)
                    printf "(%s)\n%s\n" "$1" "^ unsupported number! exit."
                    exit 1
                    ;;
                ''|*[!0-9]*)
                    printf "(%s)\n%s\n" "$1" "^ IS NOT A NUMBER OF INT! exit."
                    exit 1
                    ;;
                *) END=$1 ;;
            esac
            ;;
        -h|--help)
            echo "$USAGE"
            exit 0
            ;;
        -q|--quality)
            shift
            QUALITY="$1"
            ;;
        -u|--url)
            shift
            URL="$1"
            ;;
        --quiet)
            QUIET=1
            ;;
        --)
            shift
            break
            ;;
        esac
        shift
    done
}

get_opt "$@"

notify() {
    # call using ... &
    # get title information, notify at the background and suppress error output
    _title=$("$ytdl_exec" --no-warnings --playlist-end=1 --get-title "$URL" 2> /dev/null)
    _status="[${PROFILE}] Playing..."
    _msg="${_title}\n${URL}"
    notify-send "$_status" "$_msg"
}

ytdl_check() {
    # ytdl_exec URL verification, verify only first item if many
    "$ytdl_exec" --no-warnings --playlist-end=1 --simulate "$1"
    return_code=$?
    if [ "$return_code" -ne 0 ]; then
        summary="$ytdl_exec:"
        msg="TERMINATED\nInvalid URL,\nor just the first element from the URL"
        notify-send -u critical "$summary" "$msg"
        exit 1
    fi
}

strl_check() {
    # streamlink URL verification
    streamlink --can-handle-url "$1"
    return_code=$?
    if [ "$return_code" -ne 0 ]; then
        summary="streamlink:"
        msg="TERMINATED\nInvalid URL,\nstreamlink cannot process this URL"
        notify-send -u critical "$summary" "$msg"
        exit 1
    fi
}

ytdl() {
    # ytdl_exec
    HEIGHT="${QUALITY:-"$YTDL_Q"}"
    case "$HEIGHT" in
        *"1"*)
            HEIGHT="1080"
        ;;
        *"4"*)
            HEIGHT="480"
        ;;
        *"6"*)
            HEIGHT="720"
        ;;
        *"7"*)
            HEIGHT="720"
        ;;
        *"8"*)
            HEIGHT="1080"
        ;;
        *)
            HEIGHT="$YTDL_Q"
        ;;
    esac
    ## ext specific
    _ext_video_q="bestvideo[ext=${EXT}][height>=${LQLT}][height<=${UQLT}]"
    _ext_audio_q="bestaudio[ext=${EXT}]"
    _ext_specs_q="${_ext_video_q}+${_ext_audio_q}"
    ## fallback
    _fll_video_q="bestvideo[height>=${LQLT}][height<=${UQLT}]"
    _fll_audio_q="bestaudio"
    _fll_specs_q="${_fll_video_q}+${_fll_audio_q}"
    _thebest_avq="bestvideo+bestaudio/best"
    ## full audio/video format string with fallbacks split by the '/'
    ## NOTE: alternate/specify one of the followings in the next switch case [default]
    _ytdl_format_ext="${_ext_specs_q}/${_fll_specs_q}/${_thebest_avq}"
    _ytdl_format_fll="${_fll_specs_q}/${_thebest_avq}"
    _ytdl_format_merge_best="${_thebest_avq}"
    _ytdl_format_pre_merged="best"
    ## get audio only
    case "$QUALITY" in
        [Aa]*) # [a - stands for audio] audio_only
            ytdl_format="${_ext_audio_q}/${_fll_audio_q}"
        ;;
        [Bb]*) # [b - stands for the best] merge of bestvideo & bestaudio
            ytdl_format="$_thebest_avq"
        ;;
        [Cc]*) # [c - best (pre-encoded)] simple format which not requires merge of the av streams
            ytdl_format="best"
        ;;
        [Ss]*)
            ytdl_format="$_thebest_avq"
        ;;
        *) # [default] if not explicitly selected/passed via -q|-quality option
            ytdl_format="$_ytdl_format_ext"
        ;;
    esac
    mpv --ytdl-raw-options=playlist-end="$END" --ytdl-format="$ytdl_format" --profile="$PROFILE" "$URL"
}

strl() {
    # streamlink
    strl_check "$URL"
    QUALITY="${QUALITY:-"$STRL_Q"}"
    case "$QUALITY" in
        [Aa]*)
            QUALITY="audio_only"
        ;;
        [Bb]*)
            QUALITY="best"
        ;;
        [Cc]*)
            QUALITY="480"
        ;;
        [Ss]*)
            QUALITY="best"
        ;;
        *"1"*)
            QUALITY="best"
        ;;
        *"4"*)
            QUALITY="480p"
        ;;
        *"6"*)
            QUALITY="720p60"
        ;;
        *"7"*)
            QUALITY="720p"
        ;;
        *"8"*)
            QUALITY="best"
        ;;
        *)
            QUALITY="best"
        ;;
    esac
    bn_url=$(basename "$URL")
    TITLE="$TITLE | [$QUALITY] [STREAM]"
    attempts=1
    while [ "$attempts" -le "$attempts_total" ]; do
        streamlink --quiet --title "$TITLE" "$URL" "$QUALITY"
        [ "$attempts_total" -gt 1 ] && notify-send -t 1000 -u low \
            "[stream]:$bn_url  try  reconnect." \
            "sleep $slp sec attempts:($attempts/$attempts_total)" && sleep $slp
        attempts=$((attempts+1))
    done
    [ "$QUIET" -eq 0 ] && notify-send "[stream][end]:$bn_url EXIT" "\n$URL"
}

main() {
    # substring in URL
    case "$URL" in
        *"soundcloud"*)
            PROFILE='audio'
            QUALITY='audio'     # get only audio
            END='-1'            # get all items in the playlist
            [ "$QUIET" -eq 0 ] && notify &
            ytdl "$@"
        ;;
        *"playlist"*)
            PROFILE='audio'
            QUALITY='audio'     # get only audio
            END='-1'            # get all items in the playlist
            [ "$QUIET" -eq 0 ] && notify &
            ytdl "$@"
        ;;
        *"youtu"*)
            PROFILE='ytdl'
            [ "$QUIET" -eq 0 ] && notify &
            ytdl "$@"
        ;;
        *"trovo.live"*)
            PROFILE='stream'
            [ "$QUIET" -eq 0 ] && notify &
            TITLE=$(basename "$URL")
            strl "$@"
        ;;
        *"vkplay.live"*)
            PROFILE='stream'
            [ "$QUIET" -eq 0 ] && notify &
            TITLE=$(basename "$URL")
            strl "$@"
        ;;
        *"twitch"*"/videos/"*)
            PROFILE='vods'
            [ "$QUIET" -eq 0 ] && notify &
            ytdl "$@"
        ;;
        *"twitch"*)
            # if the last element of the url path is 'videos', strip it from the url.
            [ "$(basename "$URL")" = 'videos' ] && URL=$(dirname "$URL")
            PROFILE='stream'
            [ "$QUIET" -eq 0 ] && notify &
            # only streamlink knows this {*}
            TITLE='{author} - {category} -- {title}'
            strl "$@"
        ;;
        *"goodgame"*)
            PROFILE='stream'
            [ "$QUIET" -eq 0 ] && notify &
            TITLE=$(basename "$URL")
            strl "$@"
        ;;
        "magnet:?"*|*".torrent")
            [ "$QUIET" -eq 0 ] && notify-send -u low "[torrent] Playing..." &
            hash stig && stig add "$URL" # if stig is available at $PATH
            # opens with webtorrent.js or webtorrent-hook.lua
            mpv "$URL"
        ;;
        *)
            PROFILE='ytdl'
            ytdl_check "$URL"
            [ "$QUIET" -eq 0 ] && notify &
            ytdl "$@"
        ;;
    esac
}

main "$@"

